local Urls = require "main.module.msg_url"
go.property("speed", 0.02)
local action_id_touch = hash("touch")

local function set_pos(self, action)
	self.pos.x = vmath.lerp(self.speed, self.pos.x, action.x)
	self.pos.y = vmath.lerp(self.speed, self.pos.y, action.y)
	-- implement some smooth movement because lerp effect
	if math.abs(action.x - self.pos.x) < 120 and math.abs(action.y - self.pos.y) < 150 and
	not self.speed_change then
		self.speed = self.speed * 1.7
		self.speed_change = true
	else
		self.speed = self.actual_speed
		self.speed_change = false
	end
	go.set_position(self.pos)
end

local function set_rot(self, action)
	local x = action.x - self.pos.x
	local y = action.y - self.pos.y
	-- atan2 for determine angle betwen 2 vector (x,y) to (n1,n2) on radian
	self.rot.z = math.atan2(y, x)
	go.set_rotation(vmath.quat_rotation_z(self.rot.z))
	--print("in degree",math.deg(self.rot.z))
end

local function particle_control(enable)
	local url = Urls.my_url("#fire_trail") -- auto-handler
	if curr_rocket == 2 then
		url = Urls.my_url("#fire2_trail")
	elseif curr_rocket == 3 then
		url = Urls.my_url("#fire3_trail")
	elseif curr_rocket == 4 then
		url = Urls.my_url("#fire4_trail")
	end
	if enable then
		particlefx.play(url)
	else
		particlefx.stop(url)
	end
end

local function rocket_move(self, action_id, action)
	if self.game_start and action_id == action_id_touch then
		if action.pressed then
			particle_control(true)
		end
		set_pos(self, action)
		set_rot(self, action)
		if action.released then
			--print "to do slide"
			particle_control(false)
		end
	elseif not self.game_start and action_id == action_id_touch and action.pressed then
		self.game_start = true
		particle_control(true)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "change_rocket")
	self.game_start = false
	self.pos = go.get_position()
	self.rot = go.get_rotation()
	self.actual_speed = self.speed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.group == hash("coin") then
			msg.post(message.other_id, "get_coin")
		end
		if message.group == hash("meteor") and not self.is_destroy then
			print "rocket destroy!"
			particle_control(false)
			particlefx.play("#rocket_destroy_fx")
			self.is_destroy = true
			msg.post("/go_game#script", "game_end")
			msg.post(".", "release_input_focus")
			go.animate("/go_rocket#sprite", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 1, 0), go.EASING_LINEAR, 0.3)
			go.animate(".", "scale.z", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.1, 0.75, function()
				msg.post("/go_gameover#gameover", "show")
			end)
		end
	end
	if message_id == hash("change_rocket") then
		if curr_rocket == 1 then
			sprite.play_flipbook("#sprite", "ikon_roket")
		elseif curr_rocket == 2 then
			sprite.play_flipbook("#sprite", "roket2")
			self.speed = self.speed + 0.02
		elseif curr_rocket == 3 then
			sprite.play_flipbook("#sprite", "roket3")
			self.speed = self.speed + 0.04
		elseif curr_rocket == 4 then
			sprite.play_flipbook("#sprite", "roket4")
			self.speed = self.speed + 0.08
		end
		print("rocket is set to", curr_rocket)
	end
end

function on_input(self, action_id, action)
	rocket_move(self, action_id, action)
end
